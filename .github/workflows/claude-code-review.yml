name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, ready_for_review, reopened]
    # Optional: Only run on specific file changes
    # paths:
    #   - "src/**/*.ts"
    #   - "src/**/*.tsx"
    #   - "src/**/*.js"
    #   - "src/**/*.jsx"
  pull_request_target:
    types: [opened, synchronize, ready_for_review, reopened]

env:
  # Shared action configuration
  TRACK_PROGRESS: 'false'
  USE_STICKY_COMMENT: 'true'
  ADDITIONAL_PERMISSIONS: |
    actions: read

  REVIEW_PROMPT: |
    REPO: ${{ github.repository }}
    PR NUMBER: ${{ github.event.pull_request.number }}
    TITLE: ${{ github.event.pull_request.title }}
    BODY: ${{ github.event.pull_request.body }}
    AUTHOR: ${{ github.event.pull_request.user.login }}
    COMMIT: ${{ github.event.pull_request.head.sha }}

    Please review this pull request with a focus on:
    - Code quality and best practices
      - Code follows our style guide 
      - No commented-out code
      - Meaningful variable names
      - DRY principle followed
    - Potential bugs or issues
    - Security implications
    - Performance considerations
    - Test coverage
    - Requirements
      - The PR has a changeset if updating source code of published packages (packages/*)
      - The PR includes documentation if API surface changes

    Note: The PR branch is already checked out in the current working directory.

    Provide a comprehensive review including:
    - Summary of changes since last review
    - Critical issues found (be thorough)
    - Suggested improvements (be thorough)
    - Good practices observed (be concise - list only the most notable items without elaboration)
    - Action items for the author
    - Leverage collapsible <details> sections where appropriate for lengthy explanations or code snippets to enhance human readability

    When reviewing subsequent commits:
    - Track status of previously identified issues
    - Identify new problems introduced since last review
    - Note if fixes introduced new issues

    IMPORTANT: Be comprehensive about issues and improvements. For good practices, be brief - just note what was done well without explaining why or praising excessively.

    Use `mcp__github_inline_comment__create_inline_comment` to comment on specific code lines.
    <comment_tool_info>
    IMPORTANT: You have been provided with the mcp__github_comment__update_claude_comment tool to update your comment. This tool automatically handles both issue and PR comments.
    
    Tool usage example for mcp__github_comment__update_claude_comment:
    {
      "body": "Your comment text here"
    }
    Only the body parameter is required - the tool automatically knows which comment to update.
    </comment_tool_info>`}    
    IMPORTANT: Submit your review feedback by updating the Claude comment using mcp__github_comment__update_claude_comment. This will be displayed as your PR review.

  # Allowed tools:
  # - mcp__github_comment__update_claude_comment: Update Claude's sticky comment (built-in)
  # - mcp__github_inline_comment__create_inline_comment: Create inline code comments
  # - Bash(gh ...): Read-only GitHub CLI commands for PR/issue info
  # Note: gh pr comment is NOT allowed - Claude must use update_claude_comment only
  CLAUDE_ARGS: '--allowedTools "mcp__github_comment__update_claude_comment,mcp__github_inline_comment__create_inline_comment,Bash(gh issue view:*),Bash(gh search:*),Bash(gh issue list:*),Bash(gh pr diff:*),Bash(gh pr view:*),Bash(gh pr list:*)"'

jobs:
  claude-review:
    # Only run if at least one review scenario matches
    if: |
      github.event.pull_request.draft == false &&
      github.event.pull_request.head.repo != null &&
      (
        (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository) ||
        (github.event_name == 'pull_request_target' && github.event.pull_request.head.repo.full_name != github.repository)
      )
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
      pull-requests: write
      issues: read
      id-token: write
      actions: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: refs/pull/${{ github.event.pull_request.number }}/head
          fetch-depth: 1

      # Same-repo PRs: Use pull_request trigger + OIDC → claude[bot]
      - name: Internal Review
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.head.repo.full_name == github.repository
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          prompt: ${{ env.REVIEW_PROMPT }}
          use_sticky_comment: ${{ fromJSON(env.USE_STICKY_COMMENT) }}
          track_progress: ${{ fromJSON(env.TRACK_PROGRESS) }}
          claude_args: ${{ env.CLAUDE_ARGS }}
          additional_permissions: ${{ env.ADDITIONAL_PERMISSIONS }}

      # Fork PRs: Use pull_request_target trigger + github_token → github-actions[bot]
      - name: Fork Review
        if: |
          github.event_name == 'pull_request_target' &&
          github.event.pull_request.head.repo.full_name != github.repository
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}
          allowed_non_write_users: '*'
          prompt: ${{ env.REVIEW_PROMPT }}
          use_sticky_comment: ${{ fromJSON(env.USE_STICKY_COMMENT) }}
          track_progress: ${{ fromJSON(env.TRACK_PROGRESS) }}
          claude_args: ${{ env.CLAUDE_ARGS }}
          additional_permissions: ${{ env.ADDITIONAL_PERMISSIONS }}
